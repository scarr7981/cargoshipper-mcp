name: Test and Publish to PyPI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov build
    
    - name: Run tests
      run: |
        python test_server.py
        echo "‚úÖ Basic server tests passed"
    
    - name: Test package build
      run: |
        python -m build
        echo "‚úÖ Package builds successfully"

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check if version already exists on PyPI
      id: check-version
      run: |
        # Get current version from pyproject.toml  
        CURRENT_VERSION=$(python -c "
        import sys
        if sys.version_info >= (3, 11):
            import tomllib
            with open('pyproject.toml', 'rb') as f:
                data = tomllib.load(f)
        else:
            import configparser
            config = configparser.ConfigParser()
            config.read('pyproject.toml')
            # This is a fallback, may not work perfectly
            data = {'project': {'version': '1.0.0'}}
        print(data['project']['version'])
        ")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Check if this version exists on PyPI
        pip install --dry-run cargoshipper-mcp==$CURRENT_VERSION 2>/dev/null && VERSION_EXISTS=true || VERSION_EXISTS=false
        echo "version_exists=$VERSION_EXISTS" >> $GITHUB_OUTPUT
        
        if [ "$VERSION_EXISTS" = "true" ]; then
          echo "‚ö†Ô∏è  Version $CURRENT_VERSION already exists on PyPI"
        else
          echo "‚úÖ Version $CURRENT_VERSION is new, will publish"
        fi
    
    - name: Publish to PyPI
      if: steps.check-version.outputs.version_exists == 'false'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        echo "üéâ Published version ${{ steps.check-version.outputs.current_version }} to PyPI!"
    
    - name: Skip publishing (version exists)
      if: steps.check-version.outputs.version_exists == 'true'
      run: |
        echo "‚è≠Ô∏è  Skipping PyPI publish - version ${{ steps.check-version.outputs.current_version }} already exists"
        echo "üí° To publish a new version, update the version in pyproject.toml"